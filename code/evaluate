#!/usr/bin/env bash

# Exit after the first error. This way, a keyboard interrupt for one verifier
# process will prevent others from running as well.
set -eE

TEST_CASES_DIRS=("../test_cases" "../prelim_test_cases")

CORRECT_COLOUR=046 # green
UNSOUND_COLOUR=196 # red
IMPRECISE_COLOUR=214 # orange-ish yellow
INVALID_COLOUR=244 # grey

# Arg 1 is the colour code, and arg 2 is the text to be coloured
# Taken from: https://stackoverflow.com/a/69648792/7905483
colourise () { echo -ne "\033[38;5;${1}m${2}\033[0m"; }

# Convert nanoseconds to seconds
ns_to_s () { printf "%.3f" $(echo "$1 / 1000000000" | bc -l); }

max_score=0 # total number of verified examples
verified=0 # true positives
unverified=0 # true negatives
unsound=0 # false positives
imprecise=0 # false negatives

min_time= # least time taken by a test
max_time=0 # most time taken by a test
total_time=0 # total time taken by all tests

test ()
{
    for test_dir in "${TEST_CASES_DIRS[@]}"; do
        while IFS=, read net spec expected; do
            echo -n "$net @ $spec: "
            start_time=$(date +"%s%N")
            prediction=$( \
                python verifier.py \
                --net $net \
                --spec "$test_dir/$net/$spec" \
            )
            end_time=$(date +"%s%N")
            curr_time=$((end_time - start_time))

            ((total_time+=$curr_time))
            if [ -z "$min_time" ] || (( curr_time < min_time )); then
                min_time=$curr_time
            fi
            if (( curr_time > max_time )); then
                max_time=$curr_time
            fi

            if [[ "$prediction" == $expected ]]; then
                colour=$CORRECT_COLOUR
                if [[ $expected == verified ]]; then
                    ((verified+=1))
                else
                    ((unverified+=1))
                fi
            elif [[ "$prediction" == verified ]]; then
                colour=$UNSOUND_COLOUR
                ((unsound+=1))
            elif [[ "$prediction" == 'not verified' ]]; then
                colour=$IMPRECISE_COLOUR
                ((imprecise+=1))
            else
                echo "$(colourise $INVALID_COLOUR "$prediction") - $(ns_to_s $curr_time)s"
                return 1
            fi

            if [[ $expected == verified ]]; then
                ((max_score+=1))
            fi

            echo "$(colourise $colour "$prediction") - $(ns_to_s $curr_time)s"
        done < "$test_dir/gt.txt"
    done
}

# Exit testing after the first error. This way, a keyboard interrupt for one
# verifier process will prevent others from running as well.
trap 'return 0' SIGINT
test
trap - SIGINT

total_tests=$((verified + unverified + unsound + imprecise))

# Only print summary if at least one test was completed
if (( total_tests > 0 )); then
cat << EOS

=======
Summary
=======

Total tests: $total_tests
Correct: $(colourise $CORRECT_COLOUR $((verified + unverified)))
Unsound: $(colourise $UNSOUND_COLOUR $unsound)
Imprecise: $(colourise $IMPRECISE_COLOUR $imprecise)

Score: $((verified - 2 * unsound))/$max_score

Minimum test time: $(ns_to_s $min_time)s
Maximum test time: $(ns_to_s $max_time)s
Average test time: $(ns_to_s $((total_time / total_tests)))s
Total test time: $(ns_to_s $total_time)s
EOS
fi
